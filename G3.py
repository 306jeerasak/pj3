import threading
import time
import random
import requests
from datetime import datetime, timezone

# ---------------- MT5Bot Simulation Class ----------------
class MT5BotSim:
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ 9000/exec ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô HTTP API ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö SQL Query
    QUESTDB_EXEC_URL = "http://localhost:9000/exec"

    def __init__(self, symbol="EURUSD", n_positions=3):
        self.symbol = symbol
        self.n_positions = n_positions

    # ---------- Simulate Position ----------
    def simulate_position(self, pos_type="buy"):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á position ‡∏õ‡∏•‡∏≠‡∏° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á QuestDB
        """
        class FakePosition:
            def __init__(self, symbol, ticket, pos_type, volume, price_open, price_current, profit):
                self.symbol = symbol
                self.ticket = int(ticket)
                self.type = pos_type
                self.volume = float(volume)
                self.price_open = float(price_open)
                self.price_current = float(price_current)
                self.profit = float(profit)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ID ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) + ‡∏™‡∏∏‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        ticket = int(time.time() * 1000) % 100000 + random.randint(1, 999)
        volume = round(random.uniform(0.01, 0.05), 2)
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        if "USD" in self.symbol and "XAU" not in self.symbol:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô EURUSD, GBPUSD (5 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
            price_open = round(random.uniform(1.05, 1.30), 5)
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_current = round(price_open + random.uniform(-0.005, 0.005), 5) 
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£: (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î) * Volume * Contract Size (100,000)
            profit = round((price_current - price_open) * volume * 100000, 2)
        else:  # XAUUSD (1 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
            price_open = round(random.uniform(1900, 2000), 1)
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_current = round(price_open + random.uniform(-5, 5), 1)
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£: (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î) * Volume * Contract Size (100)
            profit = round((price_current - price_open) * volume * 100, 2)

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sell position ‡πÉ‡∏´‡πâ profit ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
        if pos_type == "sell":
            profit = -profit

        return FakePosition(self.symbol, ticket, pos_type, volume, price_open, price_current, profit)

    # ---------- QuestDB Logging (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ TIMESTAMP) ----------
    def save_position_to_questdb(self, position):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å position ‡∏•‡∏á QuestDB ‡∏î‡πâ‡∏ß‡∏¢ SQL INSERT ‡∏ú‡πà‡∏≤‡∏ô HTTP API
        *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: QuestDB HTTP SQL API ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö TIMESTAMP ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601 String ***
        """
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601 string (UTC)
        # ‡πÉ‡∏ä‡πâ datetime.now(timezone.utc) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÇ‡∏î‡∏¢‡∏°‡∏µ Timezone information
        timestamp_dt = datetime.now(timezone.utc)
        
        # 2. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ISO 8601 string ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 'Z' (‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC) 
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 'YYYY-MM-DDTHH:mm:ss.SSSSSSZ' (QuestDB ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö microsecond)
        # ‡πÉ‡∏ä‡πâ .isoformat() ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà +00:00 ‡∏î‡πâ‡∏ß‡∏¢ Z
        timestamp_str = timestamp_dt.isoformat().replace('+00:00', 'Z')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL INSERT query
        query = f"""
        INSERT INTO positions
        VALUES(
            '{position.symbol}',
            {position.ticket},
            '{position.type}',
            {position.volume},
            {position.price_open},
            {position.price_current},
            {position.profit},
            '{timestamp_str}'  -- !!! ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö QuestDB !!!
        )
        """
        
        try:
            # ‡πÉ‡∏ä‡πâ params={'query': ...} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ requests ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ encoding URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            r = requests.get(self.QUESTDB_EXEC_URL, params={'query': query})
            
            if r.status_code == 200:
                result = r.json()
                if 'error' in result:
                    print(f"[{self.symbol}] ‚ùå SQL Error: {result.get('error', 'Unknown error')}")
                    # ‡∏û‡∏¥‡∏°‡∏û‡πå Query ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug
                    # print(f"Query: {query.strip()}")
                else:
                    print(f"[{self.symbol}] ‚úÖ Position {position.ticket} saved | Profit: {position.profit:9.2f} | Time: {timestamp_str}")
            else:
                print(f"[{self.symbol}] üõë HTTP Error: status={r.status_code}, {r.text.strip()[:100]}...")
        except requests.exceptions.ConnectionError as e:
            print(f"[{self.symbol}] üö® Exception: Cannot connect to QuestDB at {self.QUESTDB_EXEC_URL}. Is it running?")
            print(f"[{self.symbol}] Error details: {e}")
            time.sleep(5) # ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        except Exception as e:
            print(f"[{self.symbol}] üí• Unknown Exception: {e}")

    # ---------- Run Simulation Loop ----------
    def run(self):
        print(f"[{self.symbol}] Bot started...")
        while True:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Buy/Sell positions ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            for _ in range(self.n_positions):
                # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Buy position
                pos_buy = self.simulate_position("buy")
                self.save_position_to_questdb(pos_buy)
                
                time.sleep(0.5) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ position

                # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Sell position
                pos_sell = self.simulate_position("sell")
                self.save_position_to_questdb(pos_sell)
                
                time.sleep(0.5)

            time.sleep(2) # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

# ---------------- Main: MultiThread Simulation ----------------
if __name__ == "__main__":
    symbols = ["EURUSD", "XAUUSD", "GBPUSD"]
    bots = []

    print("=" * 60)
    print(" ü§ñ MT5 Position Logger Simulation (QuestDB) üìà")
    print("=" * 60)
    print(f"Target QuestDB: {MT5BotSim.QUESTDB_EXEC_URL.split('/exec')[0]}")
    print(f"Symbols: {', '.join(symbols)}")
    print(f"Positions per round: {MT5BotSim(symbols[0]).n_positions} buys + {MT5BotSim(symbols[0]).n_positions} sells per symbol")
    print(f"Total positions/cycle: {len(symbols) * MT5BotSim(symbols[0]).n_positions * 2}")
    print("=" * 60)

    # --- (‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á) ---
    print("!!! ‚ö†Ô∏è ACTION REQUIRED ‚ö†Ô∏è !!!")
    print("Go to http://127.0.0.1:9000 and run this SQL query FIRST:")
    print("-" * 60)
    print("CREATE TABLE IF NOT EXISTS positions (")
    print("  symbol SYMBOL INDEX,")
    print("  ticket LONG,")
    print("  type SYMBOL,")
    print("  volume DOUBLE,")
    print("  price_open DOUBLE,")
    print("  price_current DOUBLE,")
    print("  profit DOUBLE,")
    print("  timestamp TIMESTAMP")
    print(") TIMESTAMP(timestamp) PARTITION BY DAY;")
    print("-" * 60)
    
    print("\nWaiting 10 seconds to start bots...\n")
    time.sleep(10) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô

    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bot ‡πÉ‡∏ô Multi-Thread ---
    for sym in symbols:
        bot = MT5BotSim(symbol=sym, n_positions=3)
        t = threading.Thread(target=bot.run, daemon=True)
        t.start()
        bots.append(t)
        time.sleep(0.2) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° bot ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    print("\n\nüéâ ‚úì All bots running... Press Ctrl+C to stop.\n")

    # Keep main thread alive
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print("\n\nSimulation stopped.")
        print("üîç Check your data at: http://127.0.0.1:9000")